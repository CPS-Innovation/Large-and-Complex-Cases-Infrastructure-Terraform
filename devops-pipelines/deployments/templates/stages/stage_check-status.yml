---
parameters:
  - name: buildAgentName
    type: string
  - name: targetBuild
    type: string
  - name: targetLabel
    type: string
  - name: targetSuffix
    type: string
  - name: azureSubscription
    type: string
  - name: statusCheckMethod
    type: string
  - name: statusCheckRetries
    type: string
  - name: statusCheckDelaySeconds
    type: string
  - name: statusCheckTimeoutSeconds
    type: string

stages:
  - stage: Check_Status_${{ parameters.targetLabel }}
    pool:
      name: ${{ parameters.buildAgentName }}
    displayName: ${{ parameters.targetLabel }} > Status Checks
    dependsOn: Deploy_${{ parameters.targetLabel }}
    condition: succeeded()
    jobs:
      - job: Get_Status_URIs
        condition: succeeded()
        displayName: Get Status URIs
        steps:
          - template: jobs/tasks/task_get-credentials.yml
            parameters:
              azureSubscription: ${{ parameters.azureSubscription }}

          - template: jobs/tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: ${{ parameters.targetSuffix }}
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_API
        dependsOn: Get_Status_URIs
        condition: succeeded()
        displayName: Check API
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.apiUri']]
        steps:
          - template: jobs/tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: ${{ parameters.targetBuild }}
              targetLabel: ${{ parameters.targetLabel }}
              targetAppName: "API"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: ${{ parameters.statusCheckMethod }}
              statusCheckRetries: ${{ parameters.statusCheckRetries }}
              statusCheckDelaySeconds: ${{ parameters.statusCheckDelaySeconds }}
              statusCheckTimeoutSeconds: ${{ parameters.statusCheckTimeoutSeconds }}
              successTextContent: $(resources.pipeline.ComplexCasesBuild.runName)
      
      ### Commented out the checking of the mock - query with the developers for the correct endpoint for health checks and add that here and to the health check definition in terraform        
      #- job: Check_Mock
      #  dependsOn: Get_Status_URIs
      #  condition: succeeded()
      #  displayName: Check Mock
      #  variables:
      #    uri: $[dependencies.Get_Status_URIs.outputs['uris.mockUri']]
      #  steps:
      #    - template: jobs/tasks/task_call-status-endpoint.yml
      #      parameters:
      #        targetBuild: ${{ parameters.targetBuild }}
      #        targetLabel: ${{ parameters.targetLabel }}
      #        targetAppName: "API"
      #        targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
      #        endpointUri: "$(uri)/__admin/mappings"
      #        statusCheckMethod: ${{ parameters.statusCheckMethod }}
      #        statusCheckRetries: ${{ parameters.statusCheckRetries }}
      #        statusCheckDelaySeconds: ${{ parameters.statusCheckDelaySeconds }}
      #        statusCheckTimeoutSeconds: ${{ parameters.statusCheckTimeoutSeconds }}
      #        successTextContent: "lacc"
              
      #- job: Check_UI
      #  dependsOn: Get_Status_URIs
      #  condition: succeeded()
      #  displayName: Check UI
      #  variables:
      #    uri: $[dependencies.Get_Status_URIs.outputs['uris.uiUri']]
      #  steps:
      #    - template: jobs/tasks/task_call-status-endpoint.yml
      #      parameters:
      #        targetBuild: ${{ parameters.targetBuild }}
      #        targetLabel: ${{ parameters.targetLabel }}
      #        targetAppName: "UI"
      #        targetScript: "InvokeRequestWithRetry.ps1"
      #        endpointUri: "$(uri)/ui-spa/build-version.txt"
      #        statusCheckMethod: ${{ parameters.statusCheckMethod }}
      #        statusCheckRetries: ${{ parameters.statusCheckRetries }}
      #        statusCheckDelaySeconds: ${{ parameters.statusCheckDelaySeconds }}
      #        statusCheckTimeoutSeconds: ${{ parameters.statusCheckTimeoutSeconds }}
      #        successTextContent: $(resources.pipeline.ComplexCasesBuild.runName)
