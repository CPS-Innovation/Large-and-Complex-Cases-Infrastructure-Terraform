---
parameters:
  - name: buildAgentName
    type: string
  - name: targetEnv
    type: string
  - name: targetBuild
    type: string
  - name: targetLabel
    type: string
  - name: azureSubscription
    type: string
  - name: targetPlanName
    type: string
  - name: terraformStorageAccount
    type: string
  - name: applicationTerraformContainerName
    type: string
  - name: terraformStateKey
    type: string
  - name: terraformStateAccessKey
    type: string
  - name: logRetentionTime
    type: string
  - name: totalLogRetentionTime
    type: string
  - name: sharedSuffix
    type: string
  - name: stageDependsOn
    type: object

stages:
  - stage: Apply_${{ parameters.targetLabel }}
    pool:
      name: ${{ parameters.buildAgentName }}
    displayName: ${{ parameters.targetLabel }} > Apply Terraform
    ${{ if parameters.stageDependsOn }}:
      dependsOn: ${{ parameters.stageDependsOn }}
    jobs:
      - deployment: Wait_For_Running_Builds
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)

      - deployment: Apply_Application_Terraform
        condition: succeeded()
        dependsOn: Wait_For_Running_Builds
        displayName: Apply Application Terraform
        environment: ${{ parameters.targetEnv }}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: ${{ parameters.azureSubscription }}

                - template: jobs/tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetTerraformArtifact: "application-terraform-files"
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Application Terraform CI Deployment"
                    targetPlanName: ${{ parameters.targetPlanName }}
                    terraformStorageAccount: ${{ parameters.terraformStorageAccount }}
                    terraformContainerName: ${{ parameters.applicationTerraformContainerName }}
                    terraformStateKey: ${{ parameters.terraformStateKey }}
                    terraformStateAccessKey: ${{ parameters.terraformStateAccessKey }}
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Set_Log_Analytics_Archival_Periods
        condition: succeeded()
        dependsOn: Apply_Application_Terraform
        displayName: Update Analytics Archival Periods
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: ${{ parameters.azureSubscription }}

                - template: jobs/tasks/task_set-log-analytics-archival-periods.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Set Log Analytics Archival Periods"
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    logRetentionTime: ${{ parameters.logRetentionTime }}
                    totalLogRetentionTime: ${{ parameters.totalLogRetentionTime }}
                    sharedSuffix: ${{ parameters.sharedSuffix }}
